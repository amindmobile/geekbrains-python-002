# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод init()), который должен
# принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.

# Следующий шаг — реализовать перегрузку метода str() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода add() для реализации операции сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с
# первым элементом первой строки второй матрицы и т.д.


class Matrix:
    def __init__(self, matrix_to_work):  # принимаем сюда список списков ( одну(!) матрицу)
        self.matrix_source = matrix_to_work  # матрицу из принятого аргументы обязательно переношу в переменную класса

    def __add__(self, other):  # сюда передаем первую матрицу и принимаем вторую матрицу для сложения с первой
        result = ""  # инициализация строки, которая в итоге станет результатом
        if len(self.matrix_source) == len(other.matrix_source):  # сравнить размер слагаемых матриц
            for line_1, line_2 in zip(self.matrix_source, other.matrix_source):
                if len(line_1) != len(line_2):  # и если размер не равен
                    return 'Несовпадение размеров матриц'  # как минимум уведомить пользователя об этом
                # сложить каждое число одной матрицы с каждым числом второй матрицы, находящимся в такой же позиции
                summed_line = [x + y for x, y in zip(line_1, line_2)]
                # выгрузить полученную сумму в result, форматирование для вывода не в одну строку, а в вид марицы
                result += ' '.join([str(i) for i in summed_line]) + '\n'
        else:
            return 'Problems'  # если еще какие-то проблемы - очень информативно уведомляю пользователя
        return result  # отдам результат сложения и форматирования матриц

    def __str__(self):  # если передали в аргумент только 1 матрицу - ее и выведу при обращени к экземпляру класса
        return "\n".join([" ".join([str(number) for number in element]) for element in self.matrix_source])


matrix_0 = Matrix([[14, 6], [18, 21], [52, 11], [74, 93]])  # инициализация первой матрицы
matrix_1 = Matrix([[17, 21], [52, 5], [32, 6], [3, 7]])  # инициализация второй матрицы
#
print(f'Одна матрица: \n{matrix_0}')
print(f'Сумма двух матриц: \n{matrix_0 + matrix_1}')

# ска, я уже забыл зачем эту муть породил
# complicated_for_two_matrix_input = [[x + y for x, y in zip(one, two)] for (one, two) in zip(self.nums1, self.nums2)]
